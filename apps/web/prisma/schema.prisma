generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   Int
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                        Int                         @id @default(autoincrement())
  created_at                DateTime                    @default(now())
  updated_at                DateTime                    @updatedAt
  email                     String                      @unique
  name                      String?
  avatar_url                String?
  emailVerified             DateTime?
  accounts                  Account[]
  address                   Address?
  blockchain_accounts       BlockchainAccount[]
  bulk_disbursements        BulkDisbursement[]
  clients                   Client[]
  ewallet_accounts          EwalletAccount[]
  fiat_accounts             FiatAccount[]
  generated_invoices        Invoice[]                   @relation("GeneratedInvoices")
  received_invoices         Invoice[]                   @relation("ReceivedInvoices")
  PaymentOrchestrationState PaymentOrchestrationState[]
  sessions                  Session[]
  soroban_transactions      SorobanTransaction[]
  transactions              Transactions[]
  wallets                   Wallet[]

  @@map("users")
}

model Client {
  id                           Int                         @id @default(autoincrement())
  name                         String
  email                        String?
  tax_number                   String?
  created_at                   DateTime                    @default(now())
  updated_at                   DateTime                    @updatedAt
  user_id                      Int
  recipient_type               RecipientType               @default(BUSINESS)
  verification_status          VerificationStatus          @default(PENDING)
  is_archived                  Boolean                     @default(false)
  address                      Address?
  blockchain_accounts          BlockchainAccount[]
  bulk_disbursement_items      BulkDisbursementItem[]
  user                         User                        @relation(fields: [user_id], references: [id])
  ewallet_accounts             EwalletAccount[]
  fiat_accounts                FiatAccount[]
  invoices                     Invoice[]                   @relation("ClientInvoices")
  payment_destinations         PaymentDestination[]
  payment_orchestration_states PaymentOrchestrationState[]
  transactions                 Transactions[]

  @@index([user_id])
  @@map("clients")
}

model BlockchainAccount {
  id                   String               @id @default(uuid())
  created_at           DateTime             @default(now())
  updated_at           DateTime             @updatedAt
  address              String
  network              String
  environment          String
  client_id            Int?
  user_id              Int?
  client               Client?              @relation(fields: [client_id], references: [id])
  user                 User?                @relation(fields: [user_id], references: [id])
  payment_destinations PaymentDestination[]

  @@index([client_id])
  @@index([user_id])
  @@map("blockchain_accounts")
}

model FiatAccount {
  id                   String               @id @default(uuid())
  created_at           DateTime             @default(now())
  updated_at           DateTime             @updatedAt
  alias                String
  account_number       String
  routing_number       String?
  bank_name            String?
  bank_address         String?
  bank_city            String?
  bank_state           String?
  bank_zip             String?
  iso_currency         String
  client_id            Int?
  account_holder_name  String?
  account_type         FiatAccountType
  transfer_method      TransferMethod?
  user_id              Int?
  client               Client?              @relation(fields: [client_id], references: [id])
  user                 User?                @relation(fields: [user_id], references: [id])
  payment_destinations PaymentDestination[]

  @@index([client_id])
  @@index([user_id])
  @@map("fiat_accounts")
}

model EwalletAccount {
  id                   String               @id @default(uuid())
  created_at           DateTime             @default(now())
  updated_at           DateTime             @updatedAt
  iso_currency         String
  mobile_number        String?
  ewallet_provider     EwalletProvider?
  client_id            Int?
  user_id              Int?
  account_number       String?
  client               Client?              @relation(fields: [client_id], references: [id])
  user                 User?                @relation(fields: [user_id], references: [id])
  payment_destinations PaymentDestination[]

  @@index([client_id])
  @@index([user_id])
  @@map("ewallet_accounts")
}

model Transactions {
  id                     String                  @id @default(uuid())
  created_at             DateTime                @default(now())
  updated_at             DateTime                @updatedAt
  ts                     DateTime
  movement_type          TransactionMovementType
  tx_type                TransactionType
  blockchain_network     String
  blockchain_environment String
  blockchain_tx_id       String
  blockchain_tx_hash     String
  status                 TransactionStatus
  amount                 BigInt
  currency               String
  fee                    BigInt                  @default(0)
  wallet_id              String
  sender_id              Int
  recipient_id           Int
  reference              String?
  completed_at           DateTime?
  failed_at              DateTime?
  failed_reason          String?
  sent_at                DateTime?
  bulk_disbursement_item BulkDisbursementItem?
  invoices               Invoice[]
  recipient              Client                  @relation(fields: [recipient_id], references: [id])
  sender                 User                    @relation(fields: [sender_id], references: [id])
  wallet                 Wallet                  @relation(fields: [wallet_id], references: [id])

  @@index([sender_id])
  @@index([recipient_id])
  @@index([wallet_id])
  @@index([blockchain_network, blockchain_environment, blockchain_tx_id, blockchain_tx_hash])
  @@map("transactions")
}

model Invoice {
  id             String        @id @default(uuid())
  invoice_number String
  po_number      String?
  currency       String
  subtotal       Int
  tax_rate       Int           @default(0)
  tax_amount     Int           @default(0)
  total_amount   Int
  status         String        @default("Pending")
  due_date       DateTime
  description    String?
  notes          String?
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
  generator_id   Int?
  client_id      Int?
  receiver_id    Int?
  issuer_name    String?
  issuer_email   String?
  transaction_id String?
  client         Client?       @relation("ClientInvoices", fields: [client_id], references: [id])
  generator      User?         @relation("GeneratedInvoices", fields: [generator_id], references: [id])
  receiver       User?         @relation("ReceivedInvoices", fields: [receiver_id], references: [id])
  transaction    Transactions? @relation(fields: [transaction_id], references: [id])
  lineItems      LineItem[]

  @@index([generator_id])
  @@index([client_id])
  @@index([receiver_id])
  @@index([transaction_id])
  @@map("invoices")
}

model LineItem {
  id          Int      @id @default(autoincrement())
  description String
  quantity    Float
  amount      Float
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  invoice_id  String
  unit_price  Float
  invoice     Invoice  @relation(fields: [invoice_id], references: [id], onDelete: Cascade)

  @@index([invoice_id])
  @@map("line_items")
}

model Waitlist {
  id         Int      @id @default(autoincrement())
  contact    String
  name       String
  is_email   Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  use_case   String?

  @@map("waitlist")
}

model Address {
  id         Int      @id @default(autoincrement())
  street     String
  city       String
  state      String?
  country    String
  zip_code   String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user_id    Int?     @unique
  client_id  Int?     @unique
  client     Client?  @relation(fields: [client_id], references: [id])
  user       User?    @relation(fields: [user_id], references: [id])

  @@index([user_id])
  @@index([client_id])
  @@map("addresses")
}

model Wallet {
  id                          String                      @id @default(uuid())
  alias                       String?
  key_id                      String?
  address                     String?
  network                     String?
  network_environment         String?
  is_default                  Boolean                     @default(false)
  created_at                  DateTime                    @default(now())
  updated_at                  DateTime                    @updatedAt
  user_id                     Int
  main_balance_id             String?
  PaymentOrchestrationState   PaymentOrchestrationState[]
  soroban_events              SorobanEvent[]              @relation("SorobanEventWallet")
  soroban_state_changes       SorobanStateChange[]        @relation("SorobanStateWallet")
  soroban_source_transactions SorobanTransaction[]        @relation("SorobanSourceWallet")
  Transactions                Transactions[]
  balances                    WalletBalance[]             @relation("WalletToBalance")
  main_balance                WalletBalance?              @relation("MainBalance", fields: [main_balance_id], references: [id])
  user                        User                        @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, alias])
  @@unique([address, network])
  @@index([user_id])
  @@map("wallets")
}

model WalletBalance {
  id               String   @id @default(uuid())
  address          String
  amount           BigInt   @default(0)
  currency         String
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  wallet_id        String
  wallet           Wallet   @relation("WalletToBalance", fields: [wallet_id], references: [id], onDelete: Cascade)
  main_for_wallets Wallet[] @relation("MainBalance")

  @@unique([wallet_id, currency])
  @@index([wallet_id])
  @@map("wallet_balances")
}

model PaymentDestination {
  id                           String                      @id @default(uuid())
  created_at                   DateTime                    @default(now())
  updated_at                   DateTime                    @updatedAt
  payment_rail                 PaymentRail
  currency                     String
  client_id                    Int
  blockchain_account_id        String?
  ewallet_account_id           String?
  fiat_account_id              String?
  is_default                   Boolean                     @default(false)
  blockchain_account           BlockchainAccount?          @relation(fields: [blockchain_account_id], references: [id])
  client                       Client                      @relation(fields: [client_id], references: [id])
  ewallet_account              EwalletAccount?             @relation(fields: [ewallet_account_id], references: [id])
  fiat_account                 FiatAccount?                @relation(fields: [fiat_account_id], references: [id])
  payment_orchestration_states PaymentOrchestrationState[]

  @@index([client_id])
  @@index([fiat_account_id])
  @@index([blockchain_account_id])
  @@index([ewallet_account_id])
  @@map("payment_destinations")
}

model PaymentOrchestrationState {
  created_at             DateTime                   @default(now())
  updated_at             DateTime                   @updatedAt
  id                     String                     @id @default(uuid())
  tx_id                  String?
  tx_hash                String?
  source_currency        String
  target_currency        String
  exchange_rate          Int
  anchor                 String
  recipient_id           Int
  sender_id              Int
  wallet_id              String
  completed_at           DateTime?
  failed_at              DateTime?
  failed_reason          String?
  status                 PaymentOrchestrationStatus @default(NOT_STARTED)
  destination_id         String?
  sent_at                DateTime?
  source_amount          Int
  target_amount          Int
  sent_to_recipient_at   DateTime?
  bulk_disbursement_item BulkDisbursementItem?
  destination            PaymentDestination?        @relation(fields: [destination_id], references: [id])
  recipient              Client                     @relation(fields: [recipient_id], references: [id])
  sender                 User                       @relation(fields: [sender_id], references: [id])
  wallet                 Wallet                     @relation(fields: [wallet_id], references: [id])

  @@index([recipient_id])
  @@index([sender_id])
  @@index([wallet_id])
  @@index([anchor])
  @@map("payment_orchestration_states")
}

model BulkDisbursement {
  id               String                 @id @default(uuid())
  created_at       DateTime               @default(now())
  updated_at       DateTime               @updatedAt
  status           BulkDisbursementStatus @default(PENDING)
  total_amount_usd Int
  total_recipients Int
  initiated_at     DateTime?
  completed_at     DateTime?
  failed_at        DateTime?
  failed_reason    String?
  reference        String?
  sender_id        Int
  items            BulkDisbursementItem[]
  sender           User                   @relation(fields: [sender_id], references: [id])

  @@index([sender_id])
  @@index([status])
  @@map("bulk_disbursements")
}

model BulkDisbursementItem {
  id                       String                     @id @default(uuid())
  created_at               DateTime                   @default(now())
  updated_at               DateTime                   @updatedAt
  amount_usd               Int
  target_currency          String
  target_amount            Int
  exchange_rate            Float?
  status                   BulkItemStatus             @default(PENDING)
  processed_at             DateTime?
  failed_at                DateTime?
  failed_reason            String?
  bulk_disbursement_id     String
  recipient_id             Int
  transaction_id           String?                    @unique
  payment_orchestration_id String?                    @unique
  bulk_disbursement        BulkDisbursement           @relation(fields: [bulk_disbursement_id], references: [id], onDelete: Cascade)
  payment_orchestration    PaymentOrchestrationState? @relation(fields: [payment_orchestration_id], references: [id])
  recipient                Client                     @relation(fields: [recipient_id], references: [id])
  transaction              Transactions?              @relation(fields: [transaction_id], references: [id])

  @@index([bulk_disbursement_id])
  @@index([recipient_id])
  @@index([status])
  @@index([transaction_id])
  @@index([payment_orchestration_id])
  @@map("bulk_disbursement_items")
}

model SorobanTransaction {
  id               String               @id @default(uuid())
  created_at       DateTime             @default(now())
  updated_at       DateTime             @updatedAt
  transaction_id   String               @unique
  transaction_hash String               @unique
  ledger           Int
  timestamp        DateTime
  protocol         Int
  chain            String               @default("stellar")
  paging_token     String
  message          String?
  source_account   String
  fee              Int
  seq_num          BigInt
  memo             String
  fee_charged      Int
  return_value     String
  is_successful    Boolean              @default(true)
  error_details    String?
  raw_webhook_data Json
  source_wallet_id String?
  user_id          Int?
  events           SorobanEvent[]
  operations       SorobanOperation[]
  signatures       SorobanSignature[]
  state_changes    SorobanStateChange[]
  source_wallet    Wallet?              @relation("SorobanSourceWallet", fields: [source_wallet_id], references: [id])
  user             User?                @relation(fields: [user_id], references: [id])

  @@index([transaction_hash])
  @@index([source_account])
  @@index([ledger])
  @@index([timestamp])
  @@index([source_wallet_id])
  @@index([user_id])
  @@map("soroban_transactions")
}

model SorobanOperation {
  id                 String             @id @default(uuid())
  created_at         DateTime           @default(now())
  updated_at         DateTime           @updatedAt
  operation_index    Int
  operation_type     String
  source_account     String?
  contract_address   String?
  function_name      String?
  function_args      Json?
  raw_operation_data Json
  transaction_id     String
  transaction        SorobanTransaction @relation(fields: [transaction_id], references: [id], onDelete: Cascade)

  @@index([transaction_id])
  @@index([contract_address])
  @@index([function_name])
  @@map("soroban_operations")
}

model SorobanEvent {
  id                          String             @id @default(uuid())
  created_at                  DateTime           @default(now())
  updated_at                  DateTime           @updatedAt
  event_index                 Int
  event_type                  String
  contract_id                 String?
  topics                      Json
  data                        Json?
  is_diagnostic               Boolean            @default(false)
  in_successful_contract_call Boolean            @default(true)
  raw_event_data              Json
  transaction_id              String
  related_wallet_id           String?
  related_wallet              Wallet?            @relation("SorobanEventWallet", fields: [related_wallet_id], references: [id])
  transaction                 SorobanTransaction @relation(fields: [transaction_id], references: [id], onDelete: Cascade)

  @@index([transaction_id])
  @@index([contract_id])
  @@index([event_type])
  @@index([related_wallet_id])
  @@map("soroban_events")
}

model SorobanStateChange {
  id                 String             @id @default(uuid())
  created_at         DateTime           @default(now())
  updated_at         DateTime           @updatedAt
  change_index       Int
  change_type        String
  change_kind        String
  affected_address   String?
  raw_change_data    Json
  transaction_id     String
  affected_wallet_id String?
  affected_wallet    Wallet?            @relation("SorobanStateWallet", fields: [affected_wallet_id], references: [id])
  transaction        SorobanTransaction @relation(fields: [transaction_id], references: [id], onDelete: Cascade)

  @@index([transaction_id])
  @@index([affected_address])
  @@index([affected_wallet_id])
  @@map("soroban_state_changes")
}

model SorobanSignature {
  id              String             @id @default(uuid())
  created_at      DateTime           @default(now())
  updated_at      DateTime           @updatedAt
  signature_index Int
  hint            String
  signature       String
  transaction_id  String
  transaction     SorobanTransaction @relation(fields: [transaction_id], references: [id], onDelete: Cascade)

  @@index([transaction_id])
  @@index([hint])
  @@map("soroban_signatures")
}

model SorobanContract {
  id               String   @id @default(uuid())
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  contract_address String   @unique
  contract_name    String?
  description      String?
  network          String   @default("stellar")
  environment      String   @default("mainnet")
  is_active        Boolean  @default(true)
  webhook_url      String?

  @@index([contract_address])
  @@index([network, environment])
  @@map("soroban_contracts")
}

enum TransactionType {
  ON_CHAIN_TRANSFER
  OFF_CHAIN_TRANSFER
  ON_RAMP
  OFF_RAMP
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  NOT_STARTED
}

enum TransactionMovementType {
  IN
  OUT
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum RecipientType {
  BUSINESS
  INDIVIDUAL
}

enum FiatAccountType {
  CHECKING
  SAVINGS
}

enum TransferMethod {
  PH_PESONET
  PH_INSTAPAY
}

enum EwalletProvider {
  PH_GCASH
  PH_MAYA
  PH_COINS_PH
}

enum PaymentOrchestrationStatus {
  NOT_STARTED
  PENDING
  COMPLETED
  FAILED
  SENT_TO_RECIPIENT
}

enum PaymentRail {
  STELLAR
  WIRE
  ACH
  SEPA
  PH_INSTAPAY
  PH_PESONET
  MX_SPEI
}

enum BulkDisbursementStatus {
  PENDING
  PROCESSING
  COMPLETED
  PARTIALLY_COMPLETED
  FAILED
  CANCELLED
}

enum BulkItemStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}
