// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// User model
model User {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relationships
    generatedInvoices Invoice[] @relation("GeneratedInvoices")
    receivedInvoices  Invoice[] @relation("ReceivedInvoices")
    clients           Client[]
}

// Client model
model Client {
    id        Int      @id @default(autoincrement())
    name      String
    email     String?
    address   String?
    taxNumber String? // VAT/Tax ID
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId   Int
    // Relationships
    user     User      @relation(fields: [userId], references: [id])
    invoices Invoice[] @relation("ClientInvoices")

    @@index([userId])
}

// Invoice model
model Invoice {
    id            String   @id @default(uuid())
    invoiceNumber String   @unique
    poNumber      String? // Purchase Order number
    currency      String // e.g., "PHP", "USD", "USDC"
    subtotal      Float // Sum of line items before tax
    taxRate       Float    @default(0) // Tax rate as percentage (e.g., 12 for 12%)
    taxAmount     Float    @default(0) // Calculated tax amount
    totalAmount   Float // Final amount including tax
    status        String   @default("Pending") // "Paid", "Pending", "Overdue", "Cancelled"
    dueDate       DateTime
    description   String?
    notes         String?
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    // Fields for invoice generation
    generatorId Int?
    generator   User?   @relation("GeneratedInvoices", fields: [generatorId], references: [id])
    clientId    Int?
    client      Client? @relation("ClientInvoices", fields: [clientId], references: [id])

    // Fields for received invoices
    receiverId  Int?
    receiver    User?   @relation("ReceivedInvoices", fields: [receiverId], references: [id])
    issuerName  String? // Name of external invoice issuer
    issuerEmail String? // Email of external invoice issuer

    // Relationship to line items
    lineItems LineItem[]

    @@index([generatorId])
    @@index([clientId])
    @@index([receiverId])
}

// New LineItem model
model LineItem {
    id          Int      @id @default(autoincrement())
    description String
    quantity    Float
    unitPrice   Float
    amount      Float // quantity * unitPrice
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    // Relationship to invoice
    invoiceId String
    invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

    @@index([invoiceId])
}

model Waitlist {
    id        Int      @id @default(autoincrement())
    contact   String
    name      String
    isEmail   Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
